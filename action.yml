name: 'Schedule tests on Testing Farm'
description: 'A GitHub action will schedule a user defined tests to the Testing Farm to run tmt tests.'
author: 'RHSCL team'
branding:
  icon: circle
  color: red

inputs:
  api_url:
    description: 'A testing farm server url'
    required: false
    default: 'https://api.dev.testing-farm.io/v0.1'
  api_key:
    description: 'A testing farm API key'
    required: true
  git_url:
    description: 'An url to the GIT repository'
    required: true
  git_ref:
    description: 'A tmt tests branch which will be used for tests'
    required: false
    default: 'master'
  github_token:
    description: 'A github token passed from secrets'
    required: false
    default: ${{ github.token }}
  tmt_plan_regex:
    required: false
    description: 'A tmt plan regex which will be used for selecting plans. By default all plans are selected.'
  compose:
    description: 'A compose to run tests against.'
    default: 'Fedora-latest'
    required: false
  create_issue_comment:
    description: 'It creates a github issue Comment'
    required: false
    default: 'false'
  pull_request_status_name:
    description: 'GitHub pull request status name'
    required: false
    default: 'Fedora'
  variables:
    description: 'Environment variables for test, separated by ;'
    required: false
    default: ''
  secrets:
    description: 'Secret environment variables for test env, separated by ;'
    required: false
    default: ''
  debug:
    description: 'Print debug logs when working with testing farm'
    required: false
    default: 'true'
  update_pull_request_status:
    description: 'Action will update pull request status. Default: true'
    required: false
    default: 'true'
  arch:
    description: 'Define an architecture for testing environment. Default: x86_64'
    required: false
    default: 'x86_64'
  copr:
    description: 'Name of copr to use for the artifacts'
    required: false
    default: 'epel-7-x86_64'
  copr_artifacts:
    description: '"fedora-copr-build" artifacts for testing environment. Separated by ;'
    required: false
    default: ''
  tmt_context:
    description: 'A value of tmt.context variable https://tmt.readthedocs.io/en/latest/spec/context.html, variables separated by ;'
    required: false
    default: ''
  tf_scope:
    description: 'Defines the scope of Testing Farm. Possible options are public and private'
    required: false
    default: 'public'
  environment_settings:
    description: 'Pass specific settings, like post-install-script, to the testing environment.'
    required: false
    default: '{}'
  pr_head_sha:
    required: false
    default: ''

outputs:
  request_id:
    description: 'An ID of a scheduled testing farm request'
    value: ${{ steps.sched_test.outputs.req_id }}
  request_url:
    description: 'An url of a scheduled testing farm request'
    value: ${{ steps.artifacts_url.outputs.url }}
runs:
  using: "composite"
  steps:
    - name: Install mandatory packages
      run: |
        sudo apt update && sudo apt -y install curl jq
      shell: bash

    - name: Get commit SHA value
      id: sha_value
      if: ${{ inputs.update_pull_request_status == 'true' }}
      run: |
        _sha="${{ inputs.pr_head_sha }}"
        if [[ -z "$_sha" ]]; then
          _sha=$(git rev-parse HEAD)
          if [[ -z "$_sha" ]]; then
            echo "Failed to obtain SHA of current commit. Halting."
            echo "Make sure, that current directory is a git repository"
            echo "or provide the PR's HEAD SHA as input."
            exit 1
          fi
        fi
        echo "::set-output name=SHA::$_sha"
      shell: bash

    - name: Set artifacts url
      id: artifacts_url
      run: |
        url="https://artifacts.dev.testing-farm.io"
        if [ "${{ inputs.tf_scope }}" == "private" ]; then
          url="http://artifacts.osci.redhat.com/testing-farm"
        fi
        echo "::set-output name=url::$url"
      shell: bash

    - name: Generate tmt variables
      id: generate_tmt_vars
      run: |
        python -c 'import json; print({} if not "${{ inputs.variables }}".strip() else json.dumps({key: value for key, value in [s.split("=", 1) for s in "${{ inputs.variables }}".split(";")]}))' > variables
        echo "::set-output name=TMT_ENV_VARS::$(cat variables)"
      shell: bash

    - name: Generate tmt secrets
      id: generate_tmt_secrets
      run: |
        python -c 'import json; print({} if not "${{ inputs.secrets }}".strip() else json.dumps({key: value for key, value in [s.split("=", 1) for s in "${{ inputs.secrets }}".split(";")]}))' > secrets
        echo "::set-output name=TMT_ENV_SECRETS::$(cat secrets)"
      shell: bash

    - name: Generate tmt artifacts
      id: generate_artifacts
      run: |
        python -c 'import json;print("" if not "${{ inputs.copr_artifacts }}".strip() else "\"artifacts\"" + ": " + json.dumps(([{"type": "fedora-copr-build", "id": "{}:${{ inputs.copr }}".format(copr_id)} for copr_id in "${{ inputs.copr_artifacts }}".split(";")])) + ",")' > copr_artifacts
        echo "::set-output name=TMT_ENV_ARTIFACTS::$(cat copr_artifacts)"
      shell: bash

    - name: Generate tmt context
      id: generate_context
      run: |
        python -c 'import json; print({} if not "${{ inputs.tmt_context }}".strip() else json.dumps({key: value for key, value in [s.split("=", 1) for s in "${{ inputs.tmt_context }}".split(";")]}))' > tmt_context
        echo "::set-output name=TMT_CONTEXT::$(cat tmt_context)"
      shell: bash

    - name: Schedule a test on Testing Farm
      id: sched_test
      run: |
        cat << EOF > request.json
        {
          "api_key": "${{ inputs.api_key }}",
          "test": { "fmf": {
              "url": "${{ inputs.git_url }}",
              "ref": "${{ inputs.git_ref }}",
              "name": "${{ inputs.tmt_plan_regex }}"
            }
          },
          "environments": [{
            "arch": "${{ inputs.arch }}",
            "os": {
              "compose": "${{ inputs.compose }}"
            },
            "variables": ${{ steps.generate_tmt_vars.outputs.TMT_ENV_VARS }},
            "settings": ${{ inputs.environment_settings }},
            "secrets": ${{ steps.generate_tmt_secrets.outputs.TMT_ENV_SECRETS }},
            ${{ steps.generate_artifacts.outputs.TMT_ENV_ARTIFACTS }}
            "tmt": {
              "context": ${{ steps.generate_context.outputs.TMT_CONTEXT }}
            }
          }]
        }
        EOF
        if [ "${{ inputs.debug }}" == "true" ]; then
          echo "Let's print request.json (except api_key and secrets)"
          cat request.json | jq 'del(.api_key, .environments[].secrets)'
        fi
        curl ${{ inputs.api_url }}/requests \
            --data @request.json \
            --header "Content-Type: application/json" \
            --output response.json

        if [ "${{ inputs.debug }}" == "true" ]; then
          echo "Let's print testing farm response"
          cat response.json
          jq < response.json
        fi

        req_id=$(jq -r .id response.json)
        # NOTE(ivasilev) Do not store REQ_ID and RESULTS_URL as GITHUB_ENV variables, as in case multiple
        # testing farm requests are scheduled subsequent VAR=VAL >> $GITHUB_ENV instructions are ignored and
        # information from first run only is used.
        # NOTE(ivasilev) Target url may not be available at this moment if the job is still queued, so
        # will rather construct one from artifact_url and id as it has predictable format
        echo "::set-output name=req_id::$req_id"
      shell: bash

    - name: Switch pull request state to running
      id: running
      if: ${{ inputs.update_pull_request_status == 'true' }}
      run: |
        # Create running.json file for query, whether job is finished or not.
        cat << EOF > running.json
        {
          "sha": "${{ steps.sha_value.outputs.SHA }}",
          "state": "pending",
          "context": "Testing Farm - ${{ inputs.pull_request_status_name }}",
          "description": "Build started",
          "target_url": "${{ steps.artifacts_url.outputs.url }}/${{ steps.sched_test.outputs.req_id }}"
        }
        EOF
        if [ "${{ inputs.debug }}" == "true" ]; then
          cat running.json
        fi
        # Update GitHub status description to 'Build started'
        curl -X POST \
          -H "Authorization: Bearer ${{ inputs.github_token }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/$GITHUB_REPOSITORY/statuses/${{ steps.sha_value.outputs.SHA }} \
          --data @running.json > update.json
        if [ "${{ inputs.debug }}" == "true" ]; then
          cat update.json
        fi
      shell: bash

    - name: Check if scheduled test is still running
      id: still_running
      if: ${{ inputs.update_pull_request_status == 'true' }}
      run: |
        CMD=${{ inputs.api_url }}/requests/${{ steps.sched_test.outputs.req_id }}
        curl $CMD > job.json
        if [ "${{ inputs.debug }}" == "true" ]; then
          cat job.json
          jq < job.json
        fi
        state=$(jq -r .state job.json)
        while [ "$state" == "running" ] || [ "$state" == "new" ] || [ "$state" == "pending" ] || [ "$state" == "queued" ]; do
          sleep 30
          curl $CMD > job.json
          if [ "${{ inputs.debug }}" == "true" ]; then
            cat job.json
            jq < job.json
          fi
          state=$(jq -r .state job.json)
        done
      shell: bash

    - name: Get final state of Testing Farm scheduled request
      id: final_state
      if: ${{ inputs.update_pull_request_status == 'true' }}
      run: |
        curl ${{ inputs.api_url }}/requests/${{ steps.sched_test.outputs.req_id }} > job.json
        if [ "${{ inputs.debug }}" == "true" ]; then
          cat job.json
          jq < job.json
        fi
        state=$(jq -r .state job.json)
        result=$(jq -r .result.overall job.json)
        new_state="success"
        infra_error=" "
        log=""
        echo "State is $state and result is: $result"
        if [ "$state" == "complete" ]; then
          if [ "$result" != "passed" ]; then
            new_state="failure"
          fi
        else
          # Mark job in case of infrastructure issues. Report to Testing Farm team
          infra_error=" - Infra problems"
          new_state="failure"
          log="pipeline.log"
        fi
        echo "New State is: $new_state"
        echo "Infra state is: $infra_error"
        echo "::set-output name=FINAL_STATE::$new_state"
        echo "::set-output name=INFRA_STATE::$infra_error"
        echo "::set-output name=LOG::$log"
      shell: bash

    - name: Switch pull request GitHub status to final state
      if: ${{ inputs.update_pull_request_status == 'true' }}
      run: |
        cat << EOF > final_request.json
        {
          "sha": "${{ steps.sha_value.outputs.SHA }}",
          "state": "${{ steps.final_state.outputs.FINAL_STATE }}",
          "context": "Testing Farm - ${{ inputs.pull_request_status_name }}",
          "description": "Build finished${{ steps.final_state.outputs.INFRA_STATE }}",
          "target_url": "${{ steps.artifacts_url.outputs.url }}/${{ steps.sched_test.outputs.req_id }}/${{ steps.final_state.outputs.LOG }}"
        }
        EOF
        if [ "${{ inputs.debug }}" == "true" ]; then
          cat final_request.json
        fi
        # Switch Github status to proper state
        curl -X POST -H "Authorization: Bearer ${{ inputs.github_token }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/$GITHUB_REPOSITORY/statuses/${{ steps.sha_value.outputs.SHA }} \
          --data @final_request.json > final_response.json
        if [ "${{ inputs.debug }}" == "true" ]; then
          cat final_response.json
        fi
      shell: bash

    - name: Add comment with Testing Farm request/result to Pull Request
      if: ${{ inputs.create_issue_comment == 'true' }}
      id: github_comment
      uses: actions/github-script@v4
      with:
        script: |
          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: 'Testing Farm [request](${{ inputs.api_url }}/requests/${{ steps.sched_test.outputs.req_id }})' +
                  ' for ${{ inputs.compose }}/${{ inputs.copr_artifacts }} regression testing has been created.' +
                  '\nOnce finished, results should be available ' +
                  '[here](${{ steps.artifacts_url.outputs.url }}/${{ steps.sched_test.outputs.req_id }}/).' +
                  '\n[Full pipeline log](${{ steps.artifacts_url.outputs.url }}/${{ steps.sched_test.outputs.req_id }}/pipeline.log).'
          })
